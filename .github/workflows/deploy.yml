name: build-deploy-ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Gatilho para disparo manual
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Set Gradlew permissions
        run: chmod +x ./gradlew

      - name: Clean project
        run: ./gradlew clean

      - name: Build with Gradle Wrapper
        run: ./gradlew build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build -t gearing-app .

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Tag Docker Image
        run: |
          docker tag gearing-app ${{ secrets.ECR_URI }}/gering-guru/images:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.ECR_URI }}/gering-guru/images:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster gearing-cluster --service gearing-guru-service --force-new-deployment --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Notify success
        if: success()
        run: echo "Deployment completed successfully!"

      - name: Notify failure
        if: failure()
        run: echo "Deployment failed!"

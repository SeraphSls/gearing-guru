name: Push-to-EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      - name: Set Gradlew permissions
        run: chmod +x ./gradlew
      - name: Clean project
        run: ./gradlew clean
      - name: Build with Gradle Wrapper
        run: ./gradlew build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3

      - name: Copy jar to EC2
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{secrets.EC2_SSH_KEY}}
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "./build/libs/*.jar"  # Copiar apenas o .jar
          REMOTE_HOST: ${{secrets.EC2_HOST}}
          REMOTE_USER: ${{secrets.EC2_USER}}
          TARGET:  "/home/ec2-user/app"  # Diretório específico para a aplicação

      - name: Restart application on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{secrets.EC2_SSH_KEY}} ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << 'EOF'
            sudo systemctl restart my-app.service  # Comando para reiniciar o serviço
          EOF

      - name: Check if application is running
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{secrets.EC2_SSH_KEY}} ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << 'EOF'
            curl -f http://localhost:8080/health || exit 1  # Verificar status da aplicação
          EOF

      - name: Notify success
        if: success()
        run: echo "Deployment completed successfully!"

      - name: Notify failure
        if: failure()
        run: echo "Deployment failed!"
